[
  {
    "op": "core/column-split",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "guessCellType": true,
    "removeOriginalColumn": false,
    "mode": "separator",
    "separator": ";",
    "regex": false,
    "maxColumns": 0,
    "description": "Split column physical_description by separator"
  },
  {
    "op": "core/column-removal",
    "columnName": "physical_description 5",
    "description": "Remove column physical_description 5"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "physical_description 4",
    "expression": "jython:import re\npattern =  r'\\d+(\\.\\d+)?\\s*[xX]\\s*\\d+(\\.\\d+)?(\\s*\\w*)*'\nvalue = cells[\"physical_description 4\"][\"value\"]\nmatch = re.search(pattern,value)\nif value:\n   if match:\n      return value\n   else:\n      return None\nelse:\n  return None",
    "onError": "set-to-blank",
    "newColumnName": "size",
    "columnInsertIndex": 11,
    "description": "Create column size at index 11 based on column physical_description 4 using expression jython:import re\npattern =  r'\\d+(\\.\\d+)?\\s*[xX]\\s*\\d+(\\.\\d+)?(\\s*\\w*)*'\nvalue = cells[\"physical_description 4\"][\"value\"]\nmatch = re.search(pattern,value)\nif value:\n   if match:\n      return value\n   else:\n      return None\nelse:\n  return None"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "size",
          "expression": "value",
          "columnName": "size",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [],
          "selectBlank": true,
          "selectError": false
        },
        {
          "type": "list",
          "name": "physical_description 3",
          "expression": "value",
          "columnName": "physical_description 3",
          "invert": true,
          "omitBlank": false,
          "omitError": false,
          "selection": [],
          "selectBlank": true,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "size",
    "expression": "jython:import re\npattern =  r'\\d+(\\.\\d+)?\\s*[xX]\\s*\\d+(\\.\\d+)?(\\s*\\w*)*'\nvalue = cells[\"physical_description 3\"][\"value\"]\nmatch = re.search(pattern,value)\nif value:\n   if match:\n      return value\n   else:\n      return None\nelse:\n  return None",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column size using expression jython:import re\npattern =  r'\\d+(\\.\\d+)?\\s*[xX]\\s*\\d+(\\.\\d+)?(\\s*\\w*)*'\nvalue = cells[\"physical_description 3\"][\"value\"]\nmatch = re.search(pattern,value)\nif value:\n   if match:\n      return value\n   else:\n      return None\nelse:\n  return None"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "size",
          "expression": "value",
          "columnName": "size",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [],
          "selectBlank": true,
          "selectError": false
        },
        {
          "type": "list",
          "name": "physical_description 2",
          "expression": "value",
          "columnName": "physical_description 2",
          "invert": true,
          "omitBlank": false,
          "omitError": false,
          "selection": [],
          "selectBlank": true,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "size",
    "expression": "jython:import re\npattern =  r'\\d+(\\.\\d+)?\\s*[xX]\\s*\\d+(\\.\\d+)?(\\s*\\w*)*'\nvalue = cells[\"physical_description 2\"][\"value\"]\nmatch = re.search(pattern,value)\nif value:\n   if match:\n      return value\n   else:\n      return None\nelse:\n  return None",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column size using expression jython:import re\npattern =  r'\\d+(\\.\\d+)?\\s*[xX]\\s*\\d+(\\.\\d+)?(\\s*\\w*)*'\nvalue = cells[\"physical_description 2\"][\"value\"]\nmatch = re.search(pattern,value)\nif value:\n   if match:\n      return value\n   else:\n      return None\nelse:\n  return None"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "size",
          "expression": "value",
          "columnName": "size",
          "invert": true,
          "omitBlank": false,
          "omitError": false,
          "selection": [],
          "selectBlank": true,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "size",
    "expression": "jython:import re\npattern =  r'\\d+(\\.\\d+)?\\s*[xX]\\s*\\d+(\\.\\d+)?(\\s*\\w*)*'\nvalue = cells[\"physical_description 1\"][\"value\"]\nmatch = re.search(pattern,value)\nif value:\n   if match:\n      return value+\";\"+cells[\"size\"][\"value\"]\n   else:\n      return cells[\"size\"][\"value\"]\nelse:\n  return cells[\"size\"][\"value\"]",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column size using expression jython:import re\npattern =  r'\\d+(\\.\\d+)?\\s*[xX]\\s*\\d+(\\.\\d+)?(\\s*\\w*)*'\nvalue = cells[\"physical_description 1\"][\"value\"]\nmatch = re.search(pattern,value)\nif value:\n   if match:\n      return value+\";\"+cells[\"size\"][\"value\"]\n   else:\n      return cells[\"size\"][\"value\"]\nelse:\n  return cells[\"size\"][\"value\"]"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "size",
          "expression": "value",
          "columnName": "size",
          "invert": true,
          "omitBlank": false,
          "omitError": false,
          "selection": [],
          "selectBlank": true,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "size",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column size using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "size",
          "expression": "value",
          "columnName": "size",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [],
          "selectBlank": true,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "size",
    "expression": "jython:import re\npattern =  r'\\d+(\\.\\d+)?\\s*[xX]\\s*\\d+(\\.\\d+)?(\\s*\\w*)*'\nvalue = cells[\"physical_description 1\"][\"value\"]\nmatch = re.search(pattern,value)\nif value:\n   if match:\n      return value\n   else:\n      return None\nelse:\n  return None",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column size using expression jython:import re\npattern =  r'\\d+(\\.\\d+)?\\s*[xX]\\s*\\d+(\\.\\d+)?(\\s*\\w*)*'\nvalue = cells[\"physical_description 1\"][\"value\"]\nmatch = re.search(pattern,value)\nif value:\n   if match:\n      return value\n   else:\n      return None\nelse:\n  return None"
  }
]