[
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "physical_description",
    "expression": "grel:if(value.contains(';'),1,0)",
    "onError": "set-to-blank",
    "newColumnName": "flag",
    "columnInsertIndex": 7,
    "description": "Create column flag at index 7 based on column physical_description using expression grel:if(value.contains(';'),1,0)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "flag",
          "expression": "value",
          "columnName": "flag",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": 0,
                "l": "0"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "jython:import re\npattern = r'\\d+(\\.\\d+)?\\s*[xX]\\s*\\d+(\\.\\d+)?(\\s*\\w*)*'\nmatch = re.search(pattern, value)\nif match:\n   return value\nelse:\n   return None",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column physical_description using expression jython:import re\npattern = r'\\d+(\\.\\d+)?\\s*[xX]\\s*\\d+(\\.\\d+)?(\\s*\\w*)*'\nmatch = re.search(pattern, value)\nif match:\n   return value\nelse:\n   return None"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "flag",
          "expression": "value",
          "columnName": "flag",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": 0,
                "l": "0"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "baseColumnName": "physical_description",
    "expression": "grel:if(value.contains('cm'),1,0)",
    "onError": "set-to-blank",
    "newColumnName": "unit_flag",
    "columnInsertIndex": 7,
    "description": "Create column unit_flag at index 7 based on column physical_description using expression grel:if(value.contains('cm'),1,0)"
  },
  {
    "op": "core/mass-edit",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "flag",
          "expression": "value",
          "columnName": "flag",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": 0,
                "l": "0"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        },
        {
          "type": "list",
          "name": "unit_flag",
          "expression": "value",
          "columnName": "unit_flag",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": 0,
                "l": "0"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "from": [
          "8 1/2 x 5 1/2 in. fold. "
        ],
        "fromBlank": false,
        "fromError": false,
        "to": "8 1/2 x 5 1/2 inches fold. "
      }
    ],
    "description": "Mass edit cells in column physical_description"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "flag",
          "expression": "value",
          "columnName": "flag",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": 0,
                "l": "0"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "baseColumnName": "physical_description",
    "expression": "grel:if(value.contains('/'),1,0)",
    "onError": "set-to-blank",
    "newColumnName": "slash_flag",
    "columnInsertIndex": 7,
    "description": "Create column slash_flag at index 7 based on column physical_description using expression grel:if(value.contains('/'),1,0)"
  },
  {
    "op": "core/mass-edit",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "flag",
          "expression": "value",
          "columnName": "flag",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": 0,
                "l": "0"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        },
        {
          "type": "list",
          "name": "slash_flag",
          "expression": "value",
          "columnName": "slash_flag",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": 1,
                "l": "1"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "from": [
          "8 1/2 x 5 1/2 inches fold. "
        ],
        "fromBlank": false,
        "fromError": false,
        "to": "8.5 x 5.5 inches fold. "
      }
    ],
    "description": "Mass edit cells in column physical_description"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "flag",
          "expression": "value",
          "columnName": "flag",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": 0,
                "l": "0"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "grel:value.replace('fold.', 'folded')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column physical_description using expression grel:value.replace('fold.', 'folded')"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "physical_description",
    "expression": "grel:value",
    "onError": "set-to-blank",
    "newColumnName": "size",
    "columnInsertIndex": 7,
    "description": "Create column size at index 7 based on column physical_description using expression grel:value"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "flag",
          "expression": "value",
          "columnName": "flag",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": 1,
                "l": "1"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "size",
    "expression": "jython:if \"cm\" in value:\n   return value\nelif \"inches\" in value:\n   return value\nelif \"in.\" in value:\n   return value.replace('in.', 'inches')\nelse:\n   return value",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column size using expression jython:if \"cm\" in value:\n   return value\nelif \"inches\" in value:\n   return value\nelif \"in.\" in value:\n   return value.replace('in.', 'inches')\nelse:\n   return value"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "flag",
          "expression": "value",
          "columnName": "flag",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": 1,
                "l": "1"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "size",
    "expression": "jython:if 'fold.' in value:\n  return value.replace('fold.', 'folded')\nelse:\n  return value",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column size using expression jython:if 'fold.' in value:\n  return value.replace('fold.', 'folded')\nelse:\n  return value"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "size",
    "expression": "jython:import re\npattern = re.compile(r'\\b(\\d+(\\.\\d+)?)\\s*[xX]\\s*(\\d+(\\.\\d+)?)\\s*(cm|inches)\\s*(folded|open)?\\b', re.IGNORECASE)\nif pattern.search(value):\n   return value",
    "onError": "set-to-blank",
    "newColumnName": "size_temp",
    "columnInsertIndex": 8,
    "description": "Create column size_temp at index 8 based on column size using expression jython:import re\npattern = re.compile(r'\\b(\\d+(\\.\\d+)?)\\s*[xX]\\s*(\\d+(\\.\\d+)?)\\s*(cm|inches)\\s*(folded|open)?\\b', re.IGNORECASE)\nif pattern.search(value):\n   return value"
  },
  {
    "op": "core/column-split",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "size_temp",
          "expression": "value",
          "columnName": "size_temp",
          "invert": true,
          "omitBlank": false,
          "omitError": false,
          "selection": [],
          "selectBlank": true,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "size_temp",
    "guessCellType": true,
    "removeOriginalColumn": false,
    "mode": "separator",
    "separator": ";",
    "regex": false,
    "maxColumns": 0,
    "description": "Split column size_temp by separator"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "size_temp",
          "expression": "value",
          "columnName": "size_temp",
          "invert": true,
          "omitBlank": false,
          "omitError": false,
          "selection": [],
          "selectBlank": true,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "size_temp 2",
    "expression": "jython:import re\npattern =  r'\\d+(\\.\\d+)?\\s*[xX]\\s*\\d+(\\.\\d+)?(\\s*\\w*)*'\nmatch = re.search(pattern,value)\nif value:\n   if match:\n      return value\n   else:\n      return None\nelse:\n  return None",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column size_temp 2 using expression jython:import re\npattern =  r'\\d+(\\.\\d+)?\\s*[xX]\\s*\\d+(\\.\\d+)?(\\s*\\w*)*'\nmatch = re.search(pattern,value)\nif value:\n   if match:\n      return value\n   else:\n      return None\nelse:\n  return None"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "size_temp",
          "expression": "value",
          "columnName": "size_temp",
          "invert": true,
          "omitBlank": false,
          "omitError": false,
          "selection": [],
          "selectBlank": true,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "size_temp 2",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column size_temp 2 using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "size_temp",
          "expression": "value",
          "columnName": "size_temp",
          "invert": true,
          "omitBlank": false,
          "omitError": false,
          "selection": [],
          "selectBlank": true,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "size_temp 1",
    "expression": "jython:import re\npattern =  r'\\d+(\\.\\d+)?\\s*[xX]\\s*\\d+(\\.\\d+)?(\\s*\\w*)*'\nmatch = re.search(pattern,value)\nif value:\n   if match:\n      return value\n   else:\n      return None\nelse:\n  return None",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column size_temp 1 using expression jython:import re\npattern =  r'\\d+(\\.\\d+)?\\s*[xX]\\s*\\d+(\\.\\d+)?(\\s*\\w*)*'\nmatch = re.search(pattern,value)\nif value:\n   if match:\n      return value\n   else:\n      return None\nelse:\n  return None"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "size_temp",
          "expression": "value",
          "columnName": "size_temp",
          "invert": true,
          "omitBlank": false,
          "omitError": false,
          "selection": [],
          "selectBlank": true,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "size_temp 1",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column size_temp 1 using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "size_temp",
          "expression": "value",
          "columnName": "size_temp",
          "invert": true,
          "omitBlank": false,
          "omitError": false,
          "selection": [],
          "selectBlank": true,
          "selectError": false
        },
        {
          "type": "list",
          "name": "size_temp 2",
          "expression": "value",
          "columnName": "size_temp 2",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [],
          "selectBlank": true,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "size_temp",
    "expression": "jython:return cells[\"size_temp 1\"][\"value\"]",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column size_temp using expression jython:return cells[\"size_temp 1\"][\"value\"]"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "size_temp",
          "expression": "value",
          "columnName": "size_temp",
          "invert": true,
          "omitBlank": false,
          "omitError": false,
          "selection": [],
          "selectBlank": true,
          "selectError": false
        },
        {
          "type": "list",
          "name": "size_temp 1",
          "expression": "value",
          "columnName": "size_temp 1",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [],
          "selectBlank": true,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "size_temp",
    "expression": "jython:return cells[\"size_temp 2\"][\"value\"]",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column size_temp using expression jython:return cells[\"size_temp 2\"][\"value\"]"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "size_temp",
          "expression": "value",
          "columnName": "size_temp",
          "invert": true,
          "omitBlank": false,
          "omitError": false,
          "selection": [],
          "selectBlank": true,
          "selectError": false
        },
        {
          "type": "list",
          "name": "size_temp 1",
          "expression": "value",
          "columnName": "size_temp 1",
          "invert": true,
          "omitBlank": false,
          "omitError": false,
          "selection": [],
          "selectBlank": true,
          "selectError": false
        },
        {
          "type": "list",
          "name": "size_temp 2",
          "expression": "value",
          "columnName": "size_temp 2",
          "invert": true,
          "omitBlank": false,
          "omitError": false,
          "selection": [],
          "selectBlank": true,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "size_temp",
    "expression": "jython:v1 = cells[\"size_temp 1\"][\"value\"]\nv2 = cells[\"size_temp 2\"][\"value\"]\n\nreturn v1+\";\"+v2",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column size_temp using expression jython:v1 = cells[\"size_temp 1\"][\"value\"]\nv2 = cells[\"size_temp 2\"][\"value\"]\n\nreturn v1+\";\"+v2"
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "size",
    "newColumnName": "size_old",
    "description": "Rename column size to size_old"
  },
  {
    "op": "core/column-split",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "size_temp",
          "expression": "value",
          "columnName": "size_temp",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [],
          "selectBlank": true,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "size_old",
    "guessCellType": true,
    "removeOriginalColumn": false,
    "mode": "separator",
    "separator": ";",
    "regex": false,
    "maxColumns": 0,
    "description": "Split column size_old by separator"
  },
  {
    "op": "core/column-removal",
    "columnName": "size_old 5",
    "description": "Remove column size_old 5"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "size_temp",
          "expression": "value",
          "columnName": "size_temp",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [],
          "selectBlank": true,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "size_temp",
    "expression": "jython:import re\npattern =  r'\\d+(\\.\\d+)?\\s*[xX]\\s*\\d+(\\.\\d+)?(\\s*\\w*)*'\nvalue = cells[\"size_old 4\"][\"value\"]\nmatch = re.search(pattern,value)\nif value:\n   if match:\n      return value\n   else:\n      return None\nelse:\n  return None",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column size_temp using expression jython:import re\npattern =  r'\\d+(\\.\\d+)?\\s*[xX]\\s*\\d+(\\.\\d+)?(\\s*\\w*)*'\nvalue = cells[\"size_old 4\"][\"value\"]\nmatch = re.search(pattern,value)\nif value:\n   if match:\n      return value\n   else:\n      return None\nelse:\n  return None"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "size_old 4",
          "expression": "value",
          "columnName": "size_old 4",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [],
          "selectBlank": true,
          "selectError": false
        },
        {
          "type": "list",
          "name": "size_old 3",
          "expression": "value",
          "columnName": "size_old 3",
          "invert": true,
          "omitBlank": false,
          "omitError": false,
          "selection": [],
          "selectBlank": true,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "size_temp",
    "expression": "jython:import re\npattern =  r'\\d+(\\.\\d+)?\\s*[xX]\\s*\\d+(\\.\\d+)?(\\s*\\w*)*'\nvalue = cells[\"size_old 3\"][\"value\"]\nmatch = re.search(pattern,value)\nif value:\n   if match:\n      return value\n   else:\n      return None\nelse:\n  return None",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column size_temp using expression jython:import re\npattern =  r'\\d+(\\.\\d+)?\\s*[xX]\\s*\\d+(\\.\\d+)?(\\s*\\w*)*'\nvalue = cells[\"size_old 3\"][\"value\"]\nmatch = re.search(pattern,value)\nif value:\n   if match:\n      return value\n   else:\n      return None\nelse:\n  return None"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "size_old 3",
          "expression": "value",
          "columnName": "size_old 3",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [],
          "selectBlank": true,
          "selectError": false
        },
        {
          "type": "list",
          "name": "size_old 2",
          "expression": "value",
          "columnName": "size_old 2",
          "invert": true,
          "omitBlank": false,
          "omitError": false,
          "selection": [],
          "selectBlank": true,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "size_temp",
    "expression": "jython:import re\npattern =  r'\\d+(\\.\\d+)?\\s*[xX]\\s*\\d+(\\.\\d+)?(\\s*\\w*)*'\nvalue = cells[\"size_old 2\"][\"value\"]\nmatch = re.search(pattern,value)\nif value:\n   if match:\n      return value\n   else:\n      return None\nelse:\n  return None",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column size_temp using expression jython:import re\npattern =  r'\\d+(\\.\\d+)?\\s*[xX]\\s*\\d+(\\.\\d+)?(\\s*\\w*)*'\nvalue = cells[\"size_old 2\"][\"value\"]\nmatch = re.search(pattern,value)\nif value:\n   if match:\n      return value\n   else:\n      return None\nelse:\n  return None"
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "size_temp",
    "newColumnName": "size",
    "description": "Rename column size_temp to size"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "size",
    "expression": "grel:if(value.contains(';'),1,0)",
    "onError": "set-to-blank",
    "newColumnName": "composite_check",
    "columnInsertIndex": 13,
    "description": "Create column composite_check at index 13 based on column size using expression grel:if(value.contains(';'),1,0)"
  },
  {
    "op": "core/column-removal",
    "columnName": "size_old 1",
    "description": "Remove column size_old 1"
  },
  {
    "op": "core/column-removal",
    "columnName": "size_old 2",
    "description": "Remove column size_old 2"
  },
  {
    "op": "core/column-removal",
    "columnName": "size_old 3",
    "description": "Remove column size_old 3"
  },
  {
    "op": "core/column-removal",
    "columnName": "size_old 4",
    "description": "Remove column size_old 4"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "composite_check",
          "expression": "value",
          "columnName": "composite_check",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": 0,
                "l": "0"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "size",
    "expression": "jython:return value.replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column size using expression jython:return value.replace(\"'\", \"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "size",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column size using expression value.trim()"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "size",
    "expression": "jython:return len(value)",
    "onError": "set-to-blank",
    "newColumnName": "len_check",
    "columnInsertIndex": 9,
    "description": "Create column len_check at index 9 based on column size using expression jython:return len(value)"
  }
]