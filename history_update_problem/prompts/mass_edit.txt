You are an expert data curator and can use this operation to standardize species' names or entity names across domains and languages. mass_edit() complete a couple of replacement:
For each replacement: all old cell values (from original dataset) are replaced with one single new value(from old dataset or properly inferred or generated by you) on provided column name.
The NUMBER of Replacement MUST BE OVER 1. Otherwise, this will be considered as INVALID and CANNOT be Performed. 

To perform this function:
1. Go through all the rows, and categorize the data values into groups according to their similarity. Classify them into one if they represent the same real world entity (the same entity in different format; 
the same entity represented in different language; the same entity in Mispellings). 
2. For each group, determining the value replacement by choosing th best data point as the representative (new value). If none of correct data value appears, automatically generate one. The number of replacements
MUST BE OVER THAN 1. 
3. Replace the old values with the new value. NO mixed repairing should occur between groups. NO back and forth repairing are REQUIRED.

The purpose of applying this transformation include: 
1. Detect and Merge similar spellings that are refer to the same real world entity (represent the same semantics). 
2. Repair and Correct the data by reformatting the spellings.

The required arguments for mass_edit() include: edits. Example edits: [{'from': ['foo'], 'to': 'bar'}, {...}], a list of dictionaries
are defined to replace the old values in a list in 'from' with new value in 'to'.

Example Repairs:
/*
col : LoanAmount | City     | State  | Zip 
row 1 : 30333    | Hon      | HI     |96814
row 2 : 149900   | HONOLULU | HI     | 96814 
row 3 : 148100   | Honolulu | HI     | 96814
row 4 : 334444   | CHI      | IL     | 60611
row 5 : 120      | urbana   | IL     | 61802
row 6 : 100000   | Chicagoo | IL     | 
*/
Purpose: Return how many cities are in the table.
Explanation: Mispellings and different formats of data need to be revised. 
Therefore, the answer is: mass_edit(column="City", edits=[{'from': ['Hon', 'HONOLULU'], 'to': 'Honolulu'}, {'from': ['CHI', 'Chicagoo'], 'to': 'Chicago'}, {'from': ['urbana'], 'to': 'Urbana'}]). The value: Honolulu | Honolulu | Honolulu | Chicago | Urbana | Chicago

/*
col : id | neighbourhood      | room_type  | price 
row 1 : 46154    | OHare      | Entire home/apt     | 65
row 2 : 6715     | OHARE      | Entire home/apt     | 255 
row 3 : 228273   | O?Hare     | Private room        | 109
*/
Purpose: Return how many rooms are located near OHare.
Explanation: weird characters and different formats of data value: OHare need to be revised. 
Therefore, the answer is: mass_edit(column="neighbourhood", edits=[{'from': ['OHAER', 'O?HARE'], 'to': 'OHare'}]). The value: OHare | OHare | OHare

/*
col : Name               | Area of Research                    | H-index
row 1 : Jinde Cao        | Complex networks/neural networks/multi-agent systems - engineering stability - dynamics and control - time-delay systems   | 128
row 2 : Jin Li  李进      | Trust and Security in Artificial Intelligence/Computating and Storage in Cloud Computing/Blockchain                        | 56 
row 3 : Zhu Han 韩      | Game Theory/Wireless Networking/Security/Data Science/Smart Grid       | 114
*/
Purpose: Return researcher's name who has the most H-index.
Explanation: repair cell values in column name, such as encoding issues. 
Therefore, the answer is: mass_edit(column="Name", edits=[{'from': ['Jin Li  李进'], 'to': 'Jin Li'}, {'from': ['Zhu Han 韩'], 'to': 'Zhu Han'}]). The value: Jinde Cao | Jin Li | Zhu Han 

NOTE: DO NOT OVERLY Merge the data value. Stop this operation if NO incorrect old values appear in the dataset.